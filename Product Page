<script lang="ts">
	import { onMount } from 'svelte';
	import Listing from '$lib/components/listing.svelte';
	import { listings } from '$lib/stores/ListingsStore.js';
	
	let searchQuery = $state('');
	let selectedCategory = $state('All');
	let selectedSize = $state('All');
	let selectedColor = $state('All');
	let sortOption = $state('default');
	let filteredListings = $state([]);
	
	// Sample categories for filter
	const categories = ['All', 'Running', 'Casual', 'Athletic', 'Basketball', 'Hiking', 'Sandals'];
	const sizes = ['All', '6', '7', '8', '9', '10', '11', '12'];
	const colors = ['All', 'Black', 'White', 'Red', 'Blue', 'Green', 'Gray', 'Brown'];
	
	// Initialize filter on mount
	onMount(() => {
		// Use the existing store data
		updateFilteredListings();
	});
	
	// Apply filters and sorting
	function updateFilteredListings() {
		let results = [...$listings];
		
		// Apply search query
		if (searchQuery.trim() !== '') {
			const query = searchQuery.toLowerCase();
			results = results.filter(item => 
				item.name.toLowerCase().includes(query)
			);
		}
		
		// Apply category filter (assuming we add category field to listings)
		if (selectedCategory !== 'All') {
			// This is a placeholder - you would need to add category data to your listings
			// results = results.filter(item => item.category === selectedCategory);
		}
		
		// Apply size filter
		if (selectedSize !== 'All') {
			results = results.filter(item => item.size === selectedSize);
		}
		
		// Apply color filter
		if (selectedColor !== 'All') {
			results = results.filter(item => item.color.toLowerCase() === selectedColor.toLowerCase());
		}
		
		// Apply sorting
		switch (sortOption) {
			case 'price-low-high':
				results.sort((a, b) => a.price - b.price);
				break;
			case 'price-high-low':
				results.sort((a, b) => b.price - a.price);
				break;
			case 'name-a-z':
				results.sort((a, b) => a.name.localeCompare(b.name));
				break;
			case 'name-z-a':
				results.sort((a, b) => b.name.localeCompare(a.name));
				break;
			default:
				// Default sorting (could be by newest or featured)
				break;
		}
		
		filteredListings = results;
	}
	
	// Watch for changes in filter options
	$effect(() => {
		updateFilteredListings();
	}, [searchQuery, selectedCategory, selectedSize, selectedColor, sortOption, $listings]);
</script>

<svelte:head>
	<title>Shop All Products | Sky Walkers</title>
	<meta name="description" content="Browse our collection of premium footwear. Find the perfect pair of Sky Walkers for your lifestyle." />
</svelte:head>

<div class="bg-gray-100 py-8">
	<div class="container mx-auto px-4">
		<h1 class="text-3xl font-bold mb-8">Shop All Products</h1>
		
		<!-- Search and Filter Section -->
		<div class="bg-white p-6 rounded-lg shadow-md mb-8">
			<div class="flex flex-col md:flex-row gap-4 mb-6">
				<div class="flex-grow">
					<input
						type="text"
						placeholder="Search products..."
						bind:value={searchQuery}
						class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
					/>
				</div>
				
				<div class="flex flex-wrap gap-2">
					<select
						bind:value={selectedCategory}
						class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
					>
						{#each categories as category}
							<option value={category}>{category}</option>
						{/each}
					</select>
					
					<select
						bind:value={selectedSize}
						class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
					>
						{#each sizes as size}
							<option value={size}>Size: {size}</option>
						{/each}
					</select>
					
					<select
						bind:value={selectedColor}
						class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
					>
						{#each colors as color}
							<option value={color}>Color: {color}</option>
						{/each}
					</select>
					
					<select
						bind:value={sortOption}
						class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
					>
						<option value="default">Sort: Featured</option>
						<option value="price-low-high">Price: Low to High</option>
						<option value="price-high-low">Price: High to Low</option>
						<option value="name-a-z">Name: A to Z</option>
						<option value="name-z-a">Name: Z to A</option>
					</select>
				</div>
			</div>
			
			<!-- Active Filters -->
			{#if selectedCategory !== 'All' || selectedSize !== 'All' || selectedColor !== 'All' || searchQuery}
				<div class="flex flex-wrap gap-2">
					{#if searchQuery}
						<div class="bg-sky-100 text-sky-800 px-3 py-1 rounded-full text-sm flex items-center">
							Search: {searchQuery}
							<button on:click={() => searchQuery = ''} class="ml-2 text-sky-600 hover:text-sky-800">
								×
							</button>
						</div>
					{/if}
					
					{#if selectedCategory !== 'All'}
						<div class="bg-sky-100 text-sky-800 px-3 py-1 rounded-full text-sm flex items-center">
							{selectedCategory}
							<button on:click={() => selectedCategory = 'All'} class="ml-2 text-sky-600 hover:text-sky-800">
								×
							</button>
						</div>
					{/if}
					
					{#if selectedSize !== 'All'}
						<div class="bg-sky-100 text-sky-800 px-3 py-1 rounded-full text-sm flex items-center">
							Size: {selectedSize}
							<button on:click={() => selectedSize = 'All'} class="ml-2 text-sky-600 hover:text-sky-800">
								×
							</button>
						</div>
					{/if}
					
					{#if selectedColor !== 'All'}
						<div class="bg-sky-100 text-sky-800 px-3 py-1 rounded-full text-sm flex items-center">
							Color: {selectedColor}
							<button on:click={() => selectedColor = 'All'} class="ml-2 text-sky-600 hover:text-sky-800">
								×
							</button>
						</div>
					{/if}
					
					<button
						on:click={() => {
							searchQuery = '';
							selectedCategory = 'All';
							selectedSize = 'All';
							selectedColor = 'All';
							sortOption = 'default';
						}}
						class="text-sky-600 hover:text-sky-800 text-sm underline"
					>
						Clear All Filters
					</button>
				</div>
			{/if}
		</div>
		
		<!-- Product Grid -->
		<div class="mb-4">
			<span class="text-gray-500">{filteredListings.length} products found</span>
		</div>
		
		{#if filteredListings.length > 0}
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
				{#each filteredListings as item (item.id)}
					<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition duration-200">
						<div class="h-48 bg-gray-200 relative">
							<!-- In a real app, you would use actual product images -->
							<div class="w-full h-full flex items-center justify-center text-gray-400 text-lg">
								Product Image
							</div>
						</div>
						<div class="p-4">
							<h3 class="font-bold text-lg mb-1">{item.name}</h3>
							<div class="text-gray-600 text-sm mb-2">
								Size: {item.size} • Color: {item.color}
							</div>
							<div class="flex justify-between items-center">
								<span class="text-lg font-semibold">${item.price.toFixed(2)}</span>
								<button
									on:click={() => {
										// Use the cart store directly
										import { cart } from '$lib/stores/Cartstores.js';
										cart.update(c => [...c, item]);
										alert(`Added ${item.name} to cart!`);
									}}
									class="bg-sky-600 text-white px-3 py-1 rounded hover:bg-sky-700 transition duration-200"
								>
									Add to Cart
								</button>
							</div>
						</div>
					</div>
				{/each}
			</div>
		{:else}
			<div class="bg-white p-8 rounded-lg shadow-md text-center">
				<h3 class="text-xl font-semibold mb-2">No products found</h3>
				<p class="text-gray-600 mb-4">Try adjusting your filters or search criteria</p>
				<button
					on:click={() => {
						searchQuery = '';
						selectedCategory = 'All';
						selectedSize = 'All';
						selectedColor = 'All';
						sortOption = 'default';
					}}
					class="bg-sky-600 text-white px-4 py-2 rounded-md hover:bg-sky-700 transition duration-200"
				>
					Clear Filters
				</button>
			</div>
		{/if}
	</div>
</div>
